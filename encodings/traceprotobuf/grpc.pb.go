// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.9.1
// source: grpc.proto

package traceprotobuf

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_grpc_proto protoreflect.FileDescriptor

var file_grpc_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x1a, 0x0e, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x58, 0x0a, 0x0d, 0x55,
	0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x06,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x5d, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x28, 0x01, 0x30, 0x01, 0x42, 0x48, 0x0a, 0x1c, 0x69, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x54, 0x72, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0xea, 0x02, 0x19, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_grpc_proto_goTypes = []interface{}{
	(*ExportRequest)(nil),  // 0: traceprotobuf.ExportRequest
	(*ExportResponse)(nil), // 1: traceprotobuf.ExportResponse
}
var file_grpc_proto_depIdxs = []int32{
	0, // 0: traceprotobuf.UnaryExporter.Export:input_type -> traceprotobuf.ExportRequest
	0, // 1: traceprotobuf.StreamExporter.Export:input_type -> traceprotobuf.ExportRequest
	1, // 2: traceprotobuf.UnaryExporter.Export:output_type -> traceprotobuf.ExportResponse
	1, // 3: traceprotobuf.StreamExporter.Export:output_type -> traceprotobuf.ExportResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_grpc_proto_init() }
func file_grpc_proto_init() {
	if File_grpc_proto != nil {
		return
	}
	file_exchange_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_grpc_proto_goTypes,
		DependencyIndexes: file_grpc_proto_depIdxs,
	}.Build()
	File_grpc_proto = out.File
	file_grpc_proto_rawDesc = nil
	file_grpc_proto_goTypes = nil
	file_grpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UnaryExporterClient is the client API for UnaryExporter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UnaryExporterClient interface {
	// Sends a batch of telemetry data.
	Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error)
}

type unaryExporterClient struct {
	cc grpc.ClientConnInterface
}

func NewUnaryExporterClient(cc grpc.ClientConnInterface) UnaryExporterClient {
	return &unaryExporterClient{cc}
}

func (c *unaryExporterClient) Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error) {
	out := new(ExportResponse)
	err := c.cc.Invoke(ctx, "/traceprotobuf.UnaryExporter/Export", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnaryExporterServer is the server API for UnaryExporter service.
type UnaryExporterServer interface {
	// Sends a batch of telemetry data.
	Export(context.Context, *ExportRequest) (*ExportResponse, error)
}

// UnimplementedUnaryExporterServer can be embedded to have forward compatible implementations.
type UnimplementedUnaryExporterServer struct {
}

func (*UnimplementedUnaryExporterServer) Export(context.Context, *ExportRequest) (*ExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Export not implemented")
}

func RegisterUnaryExporterServer(s *grpc.Server, srv UnaryExporterServer) {
	s.RegisterService(&_UnaryExporter_serviceDesc, srv)
}

func _UnaryExporter_Export_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnaryExporterServer).Export(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/traceprotobuf.UnaryExporter/Export",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnaryExporterServer).Export(ctx, req.(*ExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UnaryExporter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "traceprotobuf.UnaryExporter",
	HandlerType: (*UnaryExporterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Export",
			Handler:    _UnaryExporter_Export_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}

// StreamExporterClient is the client API for StreamExporter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamExporterClient interface {
	// Sends a batch of telemetry data.
	Export(ctx context.Context, opts ...grpc.CallOption) (StreamExporter_ExportClient, error)
}

type streamExporterClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamExporterClient(cc grpc.ClientConnInterface) StreamExporterClient {
	return &streamExporterClient{cc}
}

func (c *streamExporterClient) Export(ctx context.Context, opts ...grpc.CallOption) (StreamExporter_ExportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamExporter_serviceDesc.Streams[0], "/traceprotobuf.StreamExporter/Export", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamExporterExportClient{stream}
	return x, nil
}

type StreamExporter_ExportClient interface {
	Send(*ExportRequest) error
	Recv() (*ExportResponse, error)
	grpc.ClientStream
}

type streamExporterExportClient struct {
	grpc.ClientStream
}

func (x *streamExporterExportClient) Send(m *ExportRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamExporterExportClient) Recv() (*ExportResponse, error) {
	m := new(ExportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamExporterServer is the server API for StreamExporter service.
type StreamExporterServer interface {
	// Sends a batch of telemetry data.
	Export(StreamExporter_ExportServer) error
}

// UnimplementedStreamExporterServer can be embedded to have forward compatible implementations.
type UnimplementedStreamExporterServer struct {
}

func (*UnimplementedStreamExporterServer) Export(StreamExporter_ExportServer) error {
	return status.Errorf(codes.Unimplemented, "method Export not implemented")
}

func RegisterStreamExporterServer(s *grpc.Server, srv StreamExporterServer) {
	s.RegisterService(&_StreamExporter_serviceDesc, srv)
}

func _StreamExporter_Export_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamExporterServer).Export(&streamExporterExportServer{stream})
}

type StreamExporter_ExportServer interface {
	Send(*ExportResponse) error
	Recv() (*ExportRequest, error)
	grpc.ServerStream
}

type streamExporterExportServer struct {
	grpc.ServerStream
}

func (x *streamExporterExportServer) Send(m *ExportResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamExporterExportServer) Recv() (*ExportRequest, error) {
	m := new(ExportRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StreamExporter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "traceprotobuf.StreamExporter",
	HandlerType: (*StreamExporterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Export",
			Handler:       _StreamExporter_Export_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc.proto",
}
